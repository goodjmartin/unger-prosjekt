package no.goodtech.vaadin.buttons.export;


import com.vaadin.addon.tableexport.ExcelExport;
import com.vaadin.addon.tableexport.v7.DefaultTableHolder;
import com.vaadin.icons.VaadinIcons;
import com.vaadin.ui.Button;
import no.goodtech.vaadin.lists.MessyGrid;
import no.goodtech.vaadin.lists.v7.MessyTable;
import no.goodtech.vaadin.main.ApplicationResourceBundle;
import org.apache.commons.collections.map.HashedMap;

import java.util.Map;

public class ExcelExportButton extends Button {
	private static final String BUTTON_CAPTION = ApplicationResourceBundle.getInstance("vaadin-core").getString("button.excelExport");

	private String reportCaption;
	private String exportFileName;
	private Map<Object, String> propertyFormat = new HashedMap();


	public ExcelExportButton(final MessyGrid table, final String reportTitle) {
		this(table, reportTitle, "Table-Export", BUTTON_CAPTION);
	}

	/**
	 * Columns that are generated by a ColumnGenerator have to be changed to
	 *
	 * @param table          with values
	 * @param reportTitle    title of Excel export
	 * @param exportFileName Excel file name (input is without .xls)
	 * @param caption        caption for the Button
	 */
	public ExcelExportButton(final MessyGrid table, final String reportTitle, final String exportFileName, final String caption) {
		setCaption(caption);
		setIcon(VaadinIcons.FILE_TABLE);

		addClickListener((ClickListener) event -> {
			ExcelExport excelExport = new com.vaadin.addon.tableexport.ExcelExport(table);
			//TODO feiler med V8: excelExport.excludeCollapsedColumns();
			excelExport.setDisplayTotals(false);
			excelExport.setReportTitle(reportTitle);
			excelExport.setExportFileName(exportFileName + ".xls");
			excelExport.setUseTableFormatPropertyValue(true);
			excelExport.setDateDataFormat(table.getDateFormatter().toPattern());
			excelExport.setDoubleDataFormat(table.getDecimalFormatter().toPattern());
			for (Object key : propertyFormat.keySet()){
				excelExport.setExcelFormatOfProperty(key, propertyFormat.get(key));
			}
			excelExport.export();
		});
	}

	public ExcelExportButton(final MessyTable table, final String reportTitle) {
		this(table, reportTitle, "Table-Export", BUTTON_CAPTION);
	}

	/**
	 * Columns that are generated by a ColumnGenerator have to be changed to
	 *
	 * @param table          with values
	 * @param reportTitle    title of Excel export
	 * @param exportFileName Excel file name (input is without .xls)
	 * @param caption        caption for the Button
	 */
	public ExcelExportButton(final MessyTable table, final String reportTitle, final String exportFileName, final String caption) {
		setCaption(caption);
		setIcon(VaadinIcons.FILE_TABLE);

		addClickListener((ClickListener) event -> {
			com.vaadin.addon.tableexport.v7.ExcelExport excelExport = new com.vaadin.addon.tableexport.v7.ExcelExport(table);
			excelExport.setTableHolder(new DefaultTableHolder(table));
			excelExport.excludeCollapsedColumns();
			excelExport.setDisplayTotals(false);
			excelExport.setReportTitle(reportTitle);
			excelExport.setExportFileName(exportFileName + ".xls");
			excelExport.setUseTableFormatPropertyValue(true);
			excelExport.setDateDataFormat(table.getDateFormatter().toPattern());
			excelExport.setDoubleDataFormat(table.getDecimalFormatter().toPattern());
			for (Object key : propertyFormat.keySet()){
				excelExport.setExcelFormatOfProperty(key, propertyFormat.get(key));
			}
			excelExport.export();
		});
	}


	public String getReportCaption() {
		return reportCaption;
	}

	public void setReportTitle(final String reportTitle) {
		this.reportCaption = reportTitle;
	}

	public String getExportFileName() {
		return exportFileName;
	}

	public void setExportFileName(final String exportFileName) {
		this.exportFileName = exportFileName;
	}

	public void setExcelFormatOfProperty(Object property, String format){
		propertyFormat.put(property, format);
	}

	public Map<Object, String> getPropertyFormat() {
		return propertyFormat;
	}
}
